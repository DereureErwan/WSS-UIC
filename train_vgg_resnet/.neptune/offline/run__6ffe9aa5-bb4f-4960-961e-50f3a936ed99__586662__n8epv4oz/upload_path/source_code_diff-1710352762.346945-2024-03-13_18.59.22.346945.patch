diff --git a/WSITools b/WSITools
--- a/WSITools
+++ b/WSITools
@@ -1 +1 @@
-Subproject commit 2adf469be2238a27873afa1fb94bacadf811a66d
+Subproject commit 2adf469be2238a27873afa1fb94bacadf811a66d-dirty
diff --git a/__pycache__/config.cpython-311.pyc b/__pycache__/config.cpython-311.pyc
index e8a88e8..0ba34d2 100644
Binary files a/__pycache__/config.cpython-311.pyc and b/__pycache__/config.cpython-311.pyc differ
diff --git a/__pycache__/config.cpython-38.pyc b/__pycache__/config.cpython-38.pyc
index 254710b..ffde570 100644
Binary files a/__pycache__/config.cpython-38.pyc and b/__pycache__/config.cpython-38.pyc differ
diff --git a/__pycache__/config.cpython-39.pyc b/__pycache__/config.cpython-39.pyc
index 86a3acd..dd73e6c 100644
Binary files a/__pycache__/config.cpython-39.pyc and b/__pycache__/config.cpython-39.pyc differ
diff --git a/config.py b/config.py
index dd5261c..fe6ea26 100644
--- a/config.py
+++ b/config.py
@@ -1,21 +1,20 @@
 import os
+# os.getenv('PATH_CAMELYON')
 
-path_camelyon = "/home/ahabis/sshfs/CAMELYON"
+# path_camelyon = os.getenv('PATH_CAMELYON')
+# # path_preds = os.getenv('PATH_ZEUS')
+# print(path_CAMELYON)
+path_preds = '/pasteur/zeus/projets/p02/bia/ahabis/CAMELYON/'
+path_slide_tumor_train = os.path.join(path_preds, "train/tumor")
+path_slide_tumor_test = os.path.join(path_preds, "test/tumor")
+path_annotations_train = os.path.join(path_preds, "train/annotations")
+path_annotations_test = os.path.join(path_preds, "test/annotations")
 
 
-path_slide_tumor_train = os.path.join(path_camelyon, "train/tumor")
-path_slide_tumor_test = os.path.join(path_camelyon, "test/tumor")
-path_annotations_train = os.path.join(path_camelyon, "train/annotations")
-path_annotations_test = os.path.join(path_camelyon, "test/annotations")
-
-
-path_patches_scribbles_train = os.path.join(path_camelyon, "patches_scribbles_train")
-path_patches_scribbles_test = os.path.join(path_camelyon, "patches_scribbles_test")
-path_dataframe_train = os.path.join(path_camelyon, "dataframe_train.csv")
-path_dataframe_test = os.path.join(path_camelyon, "dataframe_test.csv")
-
-path_preds = "/home/ahabis/sshfs_zeus/CAMELYON"
-
+path_dataframe_train = os.path.join(path_preds, "dataframe_train.csv")
+path_dataframe_test = os.path.join(path_preds, "dataframe_test.csv")
+path_patches_scribbles_train = os.path.join(path_preds, "patches_scribbles_train")
+path_patches_scribbles_test = os.path.join(path_preds, "patches_scribbles_test")
 path_patches_test = os.path.join(path_preds, "patches_test")
 path_patches_mask_test = os.path.join(path_preds, "patches_masks")
 path_prediction_features = os.path.join(path_preds, "features_predictions")
@@ -23,7 +22,6 @@ path_slide_true_masks = os.path.join(path_preds, "truemasks")
 path_uncertainty_maps = os.path.join(path_preds, "uncertainty_maps")
 path_heatmaps = os.path.join(path_preds, "heatmaps")
 path_segmaps = os.path.join(path_preds, "segmaps")
-
 path_metric_tables = os.path.join(path_preds, "metric_tables")
 path_weights = os.path.join(path_preds, "weights")
 path_prediction_patches = os.path.join(path_preds, 'patches_prediction')
diff --git a/heatmaps/predict_and_create_heatmap_and_uncertainty_map.py b/heatmaps/predict_and_create_heatmap_and_uncertainty_map.py
index 77e5c9b..1e5b374 100644
--- a/heatmaps/predict_and_create_heatmap_and_uncertainty_map.py
+++ b/heatmaps/predict_and_create_heatmap_and_uncertainty_map.py
@@ -111,12 +111,12 @@ print("stitching patches together and creating heatmap/uncertainty map...")
 # sub.save()
 
 
-sub = SubPatches2BigTiff(
-    patch_dir=path_prediction,
-    save_to=os.path.join(path_heatmaps, filename + ".tif"),
-    ext="",
-    down_scale=4,
-    patch_size=(ps, ps),
-    xy_step=(int(ps * (1 - ov)), int(ps * (1 - ov))),
-)
-sub.save()
+# sub = SubPatches2BigTiff(
+#     patch_dir=path_prediction,
+#     save_to=os.path.join(path_heatmaps, filename + ".tif"),
+#     ext="",
+#     down_scale=4,
+#     patch_size=(ps, ps),
+#     xy_step=(int(ps * (1 - ov)), int(ps * (1 - ov))),
+# )
+# sub.save()
diff --git a/scribble_generation/cytomine_scribble_visu.ipynb b/scribble_generation/cytomine_scribble_visu.ipynb
index 6ba72d5..f37cefb 100644
--- a/scribble_generation/cytomine_scribble_visu.ipynb
+++ b/scribble_generation/cytomine_scribble_visu.ipynb
@@ -23,7 +23,7 @@
    "source": [
     "import sys\n",
     "from pathlib import Path\n",
-    "sys.path.append('/home/ahabis/2-Scribble_project')"
+    "sys.path.append('/pasteur/appa/homes/ahabis/WSS-UIC')"
    ]
   },
   {
@@ -39,7 +39,25 @@
    "execution_count": 2,
    "id": "8e3fdd49",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "OSError",
+     "evalue": "libopenslide.so.0: cannot open shared object file: No such file or directory",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[2], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mconfig\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcytomine\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodels\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ProjectCollection\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcytomine\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Cytomine\n",
+      "File \u001b[0;32m~/WSS-UIC/scribble_generation/utils.py:7\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mconfig\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;241m*\u001b[39m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mscribble_inside_shape\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Scribble\n\u001b[0;32m----> 7\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mhistolab\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mslide\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Slide\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mhistolab\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmasks\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m TissueMask\n\u001b[1;32m      9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mhistolab\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfilters\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mimage_filters\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (\n\u001b[1;32m     10\u001b[0m     ApplyMaskImage,\n\u001b[1;32m     11\u001b[0m     GreenPenFilter,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     14\u001b[0m     RgbToGrayscale,\n\u001b[1;32m     15\u001b[0m )\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/site-packages/histolab/slide.py:25\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtyping\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m TYPE_CHECKING, Iterator, List, Tuple, Union\n\u001b[1;32m     24\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[0;32m---> 25\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mPIL\u001b[39;00m\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mskimage\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmeasure\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m find_contours\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/site-packages/openslide/__init__.py:30\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mabc\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Mapping\n\u001b[1;32m     28\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mPIL\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Image\n\u001b[0;32m---> 30\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m lowlevel\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m# For the benefit of library users\u001b[39;00m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_version\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m __version__  \u001b[38;5;66;03m# noqa: F401  module-imported-but-unused\u001b[39;00m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/site-packages/openslide/lowlevel.py:84\u001b[0m\n\u001b[1;32m     82\u001b[0m         _lib \u001b[38;5;241m=\u001b[39m cdll\u001b[38;5;241m.\u001b[39mLoadLibrary(_lib)\n\u001b[1;32m     83\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 84\u001b[0m     _lib \u001b[38;5;241m=\u001b[39m \u001b[43mcdll\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLoadLibrary\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlibopenslide.so.0\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     87\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mOpenSlideError\u001b[39;00m(\u001b[38;5;167;01mException\u001b[39;00m):\n\u001b[1;32m     88\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"An error produced by the OpenSlide library.\u001b[39;00m\n\u001b[1;32m     89\u001b[0m \n\u001b[1;32m     90\u001b[0m \u001b[38;5;124;03m    Import this from openslide rather than from openslide.lowlevel.\u001b[39;00m\n\u001b[1;32m     91\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/ctypes/__init__.py:460\u001b[0m, in \u001b[0;36mLibraryLoader.LoadLibrary\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    459\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mLoadLibrary\u001b[39m(\u001b[38;5;28mself\u001b[39m, name):\n\u001b[0;32m--> 460\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dlltype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/ctypes/__init__.py:382\u001b[0m, in \u001b[0;36mCDLL.__init__\u001b[0;34m(self, name, mode, handle, use_errno, use_last_error, winmode)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_FuncPtr \u001b[38;5;241m=\u001b[39m _FuncPtr\n\u001b[1;32m    381\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m handle \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 382\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle \u001b[38;5;241m=\u001b[39m \u001b[43m_dlopen\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    383\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    384\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle \u001b[38;5;241m=\u001b[39m handle\n",
+      "\u001b[0;31mOSError\u001b[0m: libopenslide.so.0: cannot open shared object file: No such file or directory"
+     ]
+    }
+   ],
    "source": [
     "from config import *\n",
     "from utils import *\n",
@@ -62,25 +80,76 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 4,
+   "id": "d1d25de3",
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "AttributeError",
+     "evalue": "module 'os' has no attribute 'add_dll_directory'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[4], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madd_dll_directory\u001b[49m():\n\u001b[1;32m      3\u001b[0m     \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m\n",
+      "\u001b[0;31mAttributeError\u001b[0m: module 'os' has no attribute 'add_dll_directory'"
+     ]
+    }
+   ],
+   "source": [
+    "\n",
+    "import os\n",
+    "with os.add_dll_directory():\n",
+    "    import openslide"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "id": "f65cbeae",
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "OSError",
+     "evalue": "libopenslide.so.0: cannot open shared object file: No such file or directory",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[5], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/site-packages/openslide/__init__.py:30\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mabc\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Mapping\n\u001b[1;32m     28\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mPIL\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Image\n\u001b[0;32m---> 30\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m lowlevel\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m# For the benefit of library users\u001b[39;00m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mopenslide\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01m_version\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m __version__  \u001b[38;5;66;03m# noqa: F401  module-imported-but-unused\u001b[39;00m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/site-packages/openslide/lowlevel.py:84\u001b[0m\n\u001b[1;32m     82\u001b[0m         _lib \u001b[38;5;241m=\u001b[39m cdll\u001b[38;5;241m.\u001b[39mLoadLibrary(_lib)\n\u001b[1;32m     83\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m---> 84\u001b[0m     _lib \u001b[38;5;241m=\u001b[39m \u001b[43mcdll\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mLoadLibrary\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlibopenslide.so.0\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     87\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mOpenSlideError\u001b[39;00m(\u001b[38;5;167;01mException\u001b[39;00m):\n\u001b[1;32m     88\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"An error produced by the OpenSlide library.\u001b[39;00m\n\u001b[1;32m     89\u001b[0m \n\u001b[1;32m     90\u001b[0m \u001b[38;5;124;03m    Import this from openslide rather than from openslide.lowlevel.\u001b[39;00m\n\u001b[1;32m     91\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/ctypes/__init__.py:460\u001b[0m, in \u001b[0;36mLibraryLoader.LoadLibrary\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    459\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mLoadLibrary\u001b[39m(\u001b[38;5;28mself\u001b[39m, name):\n\u001b[0;32m--> 460\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dlltype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/miniconda3/envs/scribble/lib/python3.9/ctypes/__init__.py:382\u001b[0m, in \u001b[0;36mCDLL.__init__\u001b[0;34m(self, name, mode, handle, use_errno, use_last_error, winmode)\u001b[0m\n\u001b[1;32m    379\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_FuncPtr \u001b[38;5;241m=\u001b[39m _FuncPtr\n\u001b[1;32m    381\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m handle \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 382\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle \u001b[38;5;241m=\u001b[39m \u001b[43m_dlopen\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    383\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    384\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle \u001b[38;5;241m=\u001b[39m handle\n",
+      "\u001b[0;31mOSError\u001b[0m: libopenslide.so.0: cannot open shared object file: No such file or directory"
+     ]
+    }
+   ],
+   "source": [
+    "import openslide"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
    "id": "0d4286f8",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "(60494, 3)"
+       "(143282, 3)"
       ]
      },
-     "execution_count": 3,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "import pandas as pd\n",
-    "dataframe_test = pd.read_csv(path_dataframe_test,index_col = 0)\n",
-    "dataframe_test.shape"
+    "dataframe_train = pd.read_csv(path_dataframe_train,index_col = 0)\n",
+    "dataframe_train.shape"
    ]
   },
   {
@@ -315,7 +384,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.8.10"
+   "version": "3.9.18"
   }
  },
  "nbformat": 4,
diff --git a/scribble_generation/dataframe_to_images.py b/scribble_generation/dataframe_to_images.py
index 41dfa56..25b617e 100644
--- a/scribble_generation/dataframe_to_images.py
+++ b/scribble_generation/dataframe_to_images.py
@@ -76,5 +76,5 @@ def df_to_images(filename):
 
 
 if __name__ == "__main__":
-    pool = Pool(processes=16)
+    pool = Pool(processes=32)
     pool.map(df_to_images, slides)
diff --git a/train_vgg/__init__.py b/train_vgg/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/train_vgg/__pycache__/generator.cpython-38.pyc b/train_vgg/__pycache__/generator.cpython-38.pyc
deleted file mode 100644
index 216ebd9..0000000
Binary files a/train_vgg/__pycache__/generator.cpython-38.pyc and /dev/null differ
diff --git a/train_vgg/generator.py b/train_vgg/generator.py
deleted file mode 100644
index e8936ff..0000000
--- a/train_vgg/generator.py
+++ /dev/null
@@ -1,64 +0,0 @@
-import sys
-from pathlib import Path
-
-sys.path.append(str(Path(__file__).resolve().parent.parent))
-from config import *
-from torch.utils.data import Dataset, DataLoader
-from torchvision import transforms
-from PIL import ImageFile, Image
-import pandas as pd
-import numpy as np
-
-ImageFile.LOAD_TRUNCATED_IMAGES = True
-
-
-class CustomImageDataset(Dataset):
-    def augmenter(self, image):
-        k = np.random.choice([1, 2, 3])
-        alea_shift1 = np.random.random()
-        alea_shift2 = np.random.random()
-        image = np.rot90(image, k=k, axes=(0, 1))
-
-        if alea_shift1 > 0.5:
-            image = np.flipud(image)
-        if alea_shift2 > 0.5:
-            image = np.fliplr(image)
-
-        return image
-
-    def __init__(self, path_image, augmenter_bool):
-        self.path_image = path_image
-        self.dataframe = pd.DataFrame(columns=["filename"])
-        self.dataframe["filename"] = os.listdir(self.path_image)
-        self.augmenter_bool = augmenter_bool
-
-    def __getitem__(self, idx):
-        filename = self.dataframe.loc[idx]["filename"]
-        label = float(filename.split("_")[-1].split(".")[0])
-        image = np.asarray(Image.open(os.path.join(self.path_image, filename)))
-        if self.augmenter_bool:
-            image = self.augmenter(image)
-        image = np.transpose(image, (-1, 0, 1)) / 255
-
-        return image, label
-
-    def __len__(self):
-        return self.dataframe.shape[0]
-
-
-dataset_train = CustomImageDataset(
-    path_image=path_patches_scribbles_train, augmenter_bool=True
-)
-dataset_test = CustomImageDataset(
-    path_image=path_patches_scribbles_test, augmenter_bool=True
-)
-
-loader_train = DataLoader(
-    batch_size=bs, dataset=dataset_train, num_workers=16, shuffle=True
-)
-
-loader_test = DataLoader(
-    batch_size=bs, dataset=dataset_test, num_workers=16, shuffle=False
-)
-
-dataloaders = {"train": loader_train, "test": loader_test}
diff --git a/train_vgg/train.py b/train_vgg/train.py
deleted file mode 100644
index 77aac12..0000000
--- a/train_vgg/train.py
+++ /dev/null
@@ -1,155 +0,0 @@
-import sys
-from pathlib import Path
-sys.path.append(str(Path(__file__).resolve().parent.parent))
-from config import *
-import neptune.new as neptune
-from generator import *
-from torchmetrics.functional import precision_recall
-from PIL import ImageFile
-from torchvision.transforms import Normalize
-import torch
-from torchvision.models import vgg16
-from torchvision.models import resnet50
-normalize = Normalize(
-    mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)
-)
-
-
-class VGG16(torch.nn.Module):
-    def __init__(self, model):
-        super(VGG16, self).__init__()
-
-        self.vgg16 = model
-        self.relu = torch.nn.ReLU()
-        self.fc = torch.nn.Linear(in_features=1000, out_features=1).cuda()
-        self.sigmoid = torch.nn.Sigmoid()
-
-    def forward(self, x):
-        x0 = self.vgg16(x)
-        x1 = self.relu(x0)
-        x2 = self.fc(x1)
-        x3 = self.sigmoid(x2)
-        return x3
-
-
-class RESNET50(torch.nn.Module):
-    def __init__(self, model):
-        super(RESNET50, self).__init__()
-
-        self.resnet50 = model
-        self.relu = torch.nn.ReLU()
-        self.fc1 = torch.nn.Linear(in_features=1000, out_features=1000).cuda()
-        self.fc2 = torch.nn.Linear(in_features=1000, out_features=1000).cuda()
-        self.fc3 = torch.nn.Linear(in_features=1000, out_features=1000).cuda()
-        self.fc4 = torch.nn.Linear(in_features=1000, out_features=1).cuda()
-        
-        self.d1 = torch.nn.Dropout(p=0.2, inplace=False)
-        self.d2 = torch.nn.Dropout(p=0.2, inplace=False)
-        self.d3 = torch.nn.Dropout(p=0.2, inplace=False)
-
-        self.sigmoid = torch.nn.Sigmoid()
-
-    def forward(self, x):
-        x0 = self.resnet50(x)
-        x1 = self.relu(x0)
-        x2 = self.fc1(x1)
-        x3 = self.relu(x2)
-        x4 = self.d1(x3)
-
-        x5 = self.fc2(x4)
-        x6 = self.relu(x5)
-        x7 = self.d2(x6)
-
-        x8 = self.fc3(x7)
-        x9 = self.relu(x8)
-        x10 = self.d3(x9)
-
-        x11 = self.fc4(x10)
-        x12 = self.sigmoid(x11)
-
-        return x12
-
-model = RESNET50(resnet50(pretrained=False)).cuda()
-
-optimizer = torch.optim.Adam(model.parameters(), lr=1e-4)
-scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
-loss = torch.nn.BCELoss(reduction="mean")
-
-run = neptune.init(
-    project="antoine.habis.tlcm/Scribble",
-    api_token=os.environ['API_TOKEN'],
-)
-run["config/optimizer"] = optimizer
-
-
-def train(model, optimizer, train_dl, val_dl, epochs=100, loss=loss):
-    tmp = (torch.ones(1) * 1e15).cuda()
-    for epoch in range(1, epochs + 1):
-        # --- TRAIN AND EVALUATE ON TRAINING SET -----------------------------
-        model.train()
-        model.cuda()
-        loss_tot = 0.0
-        for batch in train_dl:
-            optimizer.zero_grad()
-            images = normalize(batch[0].float().cuda())
-            ys = torch.unsqueeze(batch[1], dim=-1).float().cuda()
-            pred_ys = model(images)
-            loss_ = loss(pred_ys, ys)
-            pred_ys = torch.flatten(pred_ys)
-            ys = torch.flatten(ys)
-            precision, recall = precision_recall(pred_ys, ys.to(torch.int8))
-            # backward
-            loss_.backward()
-            optimizer.step()
-            run["train/epoch/loss_tot"].log(loss_)
-            run["train/epoch/precision"].log(precision)
-            run["train/epoch/recall"].log(recall)
-
-        # --- EVALUATE ON VALIDATION SET -------------------------------------
-        model.eval()
-        val_loss_tot = 0.0
-        num_val_correct = 0
-        num_val_examples = 0
-
-        mean = torch.zeros(1).cuda()
-        with torch.no_grad():
-            for batch in val_dl:
-                optimizer.zero_grad()
-                images = normalize(batch[0].float().cuda())
-                ys = torch.unsqueeze(batch[1], dim=-1).float().cuda()
-
-                pred_ys = model(images)
-                val_loss = loss(pred_ys, ys)
-                pred_ys = torch.flatten(pred_ys)
-                ys = torch.flatten(ys)
-                precision, recall = precision_recall(pred_ys, ys.to(torch.int8))
-                mean += val_loss
-                optimizer.step()
-                run["test/epoch/loss"].log(val_loss)
-                run["test/epoch/precision"].log(precision)
-                run["test/epoch/recall"].log(recall)
-            mean = torch.mean(mean)
-
-            if torch.gt(tmp, mean):
-                print("the val loss decreased: saving the model...")
-                tmp = mean
-                if not os.path.exists(path_weights):
-                    os.makedirs(path_weights)
-
-                torch.save(
-                    model.state_dict(),
-                    os.path.join(
-                        path_weights, "weights" + str(percentage_scribbled_regions)
-                    ),
-                )
-    return 0
-
-
-train(
-    model,
-    optimizer,
-    dataloaders["train"],
-    dataloaders["test"],
-    epochs=40,
-    loss=loss,
-)
diff --git a/train_vgg/visualize_best_threshold.ipynb b/train_vgg/visualize_best_threshold.ipynb
deleted file mode 100755
index 308b4e0..0000000
--- a/train_vgg/visualize_best_threshold.ipynb
+++ /dev/null
@@ -1,354 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "4069f3d6",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/home/ahabis/.local/lib/python3.8/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: libtorch_cuda_cu.so: cannot open shared object file: No such file or directory\n",
-      "  warn(f\"Failed to load image Python extension: {e}\")\n"
-     ]
-    }
-   ],
-   "source": [
-    "import sys\n",
-    "# from pathlib import Path\n",
-    "# sys.path.append(str(Path(__file__).resolve().parent.parent))\n",
-    "# from iteration_correction import *\n",
-    "from torchvision.models import resnet50\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "88c2133c",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/home/ahabis/.local/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
-      "  warnings.warn(\n",
-      "/home/ahabis/.local/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n",
-      "  warnings.warn(msg)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "ResNet(\n",
-       "  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n",
-       "  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (relu): ReLU(inplace=True)\n",
-       "  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n",
-       "  (layer1): Sequential(\n",
-       "    (0): Bottleneck(\n",
-       "      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "      (downsample): Sequential(\n",
-       "        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      )\n",
-       "    )\n",
-       "    (1): Bottleneck(\n",
-       "      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (2): Bottleneck(\n",
-       "      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "  )\n",
-       "  (layer2): Sequential(\n",
-       "    (0): Bottleneck(\n",
-       "      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "      (downsample): Sequential(\n",
-       "        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
-       "        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      )\n",
-       "    )\n",
-       "    (1): Bottleneck(\n",
-       "      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (2): Bottleneck(\n",
-       "      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (3): Bottleneck(\n",
-       "      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "  )\n",
-       "  (layer3): Sequential(\n",
-       "    (0): Bottleneck(\n",
-       "      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "      (downsample): Sequential(\n",
-       "        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
-       "        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      )\n",
-       "    )\n",
-       "    (1): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (2): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (3): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (4): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (5): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "  )\n",
-       "  (layer4): Sequential(\n",
-       "    (0): Bottleneck(\n",
-       "      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "      (downsample): Sequential(\n",
-       "        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n",
-       "        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      )\n",
-       "    )\n",
-       "    (1): Bottleneck(\n",
-       "      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "    (2): Bottleneck(\n",
-       "      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n",
-       "      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n",
-       "      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "      (relu): ReLU(inplace=True)\n",
-       "    )\n",
-       "  )\n",
-       "  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n",
-       "  (fc): Linear(in_features=2048, out_features=1000, bias=True)\n",
-       ")"
-      ]
-     },
-     "execution_count": 6,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "model = resnet50(pretrained=False)\n",
-    "model"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 14,
-   "id": "9f6c2507",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "(80, 512)"
-      ]
-     },
-     "execution_count": 14,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "import numpy as np\n",
-    "u0 = np.zeros((32,512))\n",
-    "u1 = np.zeros((32,512))\n",
-    "u2 = np.zeros((16,512))\n",
-    "l = [u0,u1,u2]\n",
-    "np.concatenate(l).shape"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ce781816",
-   "metadata": {},
-   "outputs": [
-    {
-     "ename": "KeyboardInterrupt",
-     "evalue": "",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[5], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[39mreturn\u001b[39;00m f1_model\n\u001b[1;32m      9\u001b[0m threshold_range \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39marange(\u001b[39m0\u001b[39m,\u001b[39m1\u001b[39m,\u001b[39m0.01\u001b[39m)\n\u001b[0;32m---> 10\u001b[0m f_score_range \u001b[39m=\u001b[39m [model_metrics(i) \u001b[39mfor\u001b[39;00m i \u001b[39min\u001b[39;00m threshold_range]\n\u001b[1;32m     11\u001b[0m optimal_threshold \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39margmax(f_score_range)\u001b[39m/\u001b[39m\u001b[39mlen\u001b[39m(threshold_range)\n\u001b[1;32m     12\u001b[0m optimal_f_score \u001b[39m=\u001b[39m model_metrics(optimal_threshold)\n",
-      "Cell \u001b[0;32mIn[5], line 10\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[39mreturn\u001b[39;00m f1_model\n\u001b[1;32m      9\u001b[0m threshold_range \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39marange(\u001b[39m0\u001b[39m,\u001b[39m1\u001b[39m,\u001b[39m0.01\u001b[39m)\n\u001b[0;32m---> 10\u001b[0m f_score_range \u001b[39m=\u001b[39m [model_metrics(i) \u001b[39mfor\u001b[39;00m i \u001b[39min\u001b[39;00m threshold_range]\n\u001b[1;32m     11\u001b[0m optimal_threshold \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39margmax(f_score_range)\u001b[39m/\u001b[39m\u001b[39mlen\u001b[39m(threshold_range)\n\u001b[1;32m     12\u001b[0m optimal_f_score \u001b[39m=\u001b[39m model_metrics(optimal_threshold)\n",
-      "Cell \u001b[0;32mIn[5], line 4\u001b[0m, in \u001b[0;36mmodel_metrics\u001b[0;34m(threshold)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mmodel_metrics\u001b[39m(threshold\u001b[39m=\u001b[39m\u001b[39m0.33\u001b[39m):\n\u001b[1;32m      3\u001b[0m     \u001b[39m# longest one-liner\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m     conc_predictions \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mconcatenate([np\u001b[39m.\u001b[39mmean(np\u001b[39m.\u001b[39msqueeze(np\u001b[39m.\u001b[39mload(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(path_prediction_features, image),\u001b[39m'\u001b[39m\u001b[39mpredictions.npy\u001b[39m\u001b[39m'\u001b[39m))),\u001b[39m0\u001b[39m) \u001b[39mfor\u001b[39;00m image \u001b[39min\u001b[39;00m os\u001b[39m.\u001b[39mlistdir(path_prediction_features)])\n\u001b[1;32m      5\u001b[0m     conc_trues \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mconcatenate([np\u001b[39m.\u001b[39mload(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(path_prediction_features, image),\u001b[39m'\u001b[39m\u001b[39mtrues.npy\u001b[39m\u001b[39m'\u001b[39m)) \u001b[39mfor\u001b[39;00m image \u001b[39min\u001b[39;00m os\u001b[39m.\u001b[39mlistdir(path_prediction_features)])\n\u001b[1;32m      6\u001b[0m     f1_model \u001b[39m=\u001b[39m metrics(conc_predictions\u001b[39m>\u001b[39mthreshold,conc_trues)[\u001b[39m3\u001b[39m]\n",
-      "Cell \u001b[0;32mIn[5], line 4\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mmodel_metrics\u001b[39m(threshold\u001b[39m=\u001b[39m\u001b[39m0.33\u001b[39m):\n\u001b[1;32m      3\u001b[0m     \u001b[39m# longest one-liner\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m     conc_predictions \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mconcatenate([np\u001b[39m.\u001b[39mmean(np\u001b[39m.\u001b[39msqueeze(np\u001b[39m.\u001b[39;49mload(os\u001b[39m.\u001b[39;49mpath\u001b[39m.\u001b[39;49mjoin(os\u001b[39m.\u001b[39;49mpath\u001b[39m.\u001b[39;49mjoin(path_prediction_features, image),\u001b[39m'\u001b[39;49m\u001b[39mpredictions.npy\u001b[39;49m\u001b[39m'\u001b[39;49m))),\u001b[39m0\u001b[39m) \u001b[39mfor\u001b[39;00m image \u001b[39min\u001b[39;00m os\u001b[39m.\u001b[39mlistdir(path_prediction_features)])\n\u001b[1;32m      5\u001b[0m     conc_trues \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mconcatenate([np\u001b[39m.\u001b[39mload(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(path_prediction_features, image),\u001b[39m'\u001b[39m\u001b[39mtrues.npy\u001b[39m\u001b[39m'\u001b[39m)) \u001b[39mfor\u001b[39;00m image \u001b[39min\u001b[39;00m os\u001b[39m.\u001b[39mlistdir(path_prediction_features)])\n\u001b[1;32m      6\u001b[0m     f1_model \u001b[39m=\u001b[39m metrics(conc_predictions\u001b[39m>\u001b[39mthreshold,conc_trues)[\u001b[39m3\u001b[39m]\n",
-      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/numpy/lib/npyio.py:405\u001b[0m, in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding, max_header_size)\u001b[0m\n\u001b[1;32m    403\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[1;32m    404\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m--> 405\u001b[0m     fid \u001b[39m=\u001b[39m stack\u001b[39m.\u001b[39menter_context(\u001b[39mopen\u001b[39;49m(os_fspath(file), \u001b[39m\"\u001b[39;49m\u001b[39mrb\u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[1;32m    406\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mTrue\u001b[39;00m\n\u001b[1;32m    408\u001b[0m \u001b[39m# Code to distinguish from NumPy binary files and pickles.\u001b[39;00m\n",
-      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
-     ]
-    }
-   ],
-   "source": [
-    "# Find the best threshold for the model classification\n",
-    "def model_metrics(threshold=0.33):\n",
-    "    # longest one-liner\n",
-    "    conc_predictions = np.concatenate([np.mean(np.squeeze(np.load(os.path.join(os.path.join(path_prediction_features, image),'predictions.npy'))),0) for image in test_images])\n",
-    "    conc_trues = np.concatenate([np.load(os.path.join(os.path.join(path_prediction_features, image),'trues.npy')) for image in os.listdir(path_prediction_features)])\n",
-    "    f1_model = metrics(conc_predictions>threshold,conc_trues)[3]\n",
-    "    return f1_model\n",
-    "\n",
-    "threshold_range = np.arange(0,1,0.01)\n",
-    "f_score_range = [model_metrics(i) for i in threshold_range]\n",
-    "optimal_threshold = np.argmax(f_score_range)/len(threshold_range)\n",
-    "optimal_f_score = model_metrics(optimal_threshold)\n",
-    "\n",
-    "print('Best model threshold:', optimal_threshold)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "id": "c45b70d4",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "#plot \n",
-    "plt.plot(threshold_range,f_score_range)\n",
-    "plt.xlabel(\"Threshold (%)\")\n",
-    "plt.ylabel(\"Model F Score\")\n",
-    "\n",
-    "text= \"x={:.2f}, y={:.4f}\".format(optimal_threshold, optimal_f_score)\n",
-    "ax=plt.gca()\n",
-    "bbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\n",
-    "arrowprops = dict(arrowstyle=\"->\",connectionstyle=\"angle,angleA=0,angleB=60\")\n",
-    "kw = dict(xycoords='data',textcoords=\"axes fraction\",\n",
-    "            arrowprops=arrowprops, bbox=bbox_props, ha=\"right\", va=\"bottom\")\n",
-    "ax.annotate(text, xy=(optimal_threshold, optimal_f_score), xytext=(0.94,0.96), **kw)\n",
-    "plt.show()"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.10"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
